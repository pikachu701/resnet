import torch
import torch.nn as nn
import torch.nn.functional as F


class FocalLoss(nn.Module):
    def __init__(self, gamma=2, alpha=0.25, reduction='mean'):
        super(FocalLoss, self).__init__()
        self.gamma = gamma
        self.alpha = alpha
        self.reduction = reduction

    def forward(self, inputs, targets):
        BCE_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduction='none')
        pt = torch.exp(-BCE_loss)
        F_loss = self.alpha * (1 - pt) ** self.gamma * BCE_loss

        if self.reduction == 'mean':
            return torch.mean(F_loss)
        elif self.reduction == 'sum':
            return torch.sum(F_loss)
        else:
            return F_loss


# 定义结合 MSE 和 Focal Loss 的损失函数
class CombinedLoss(nn.Module):
    def __init__(self, mse_weight=0.5, focal_weight=0.5, gamma=2, alpha=0.25):
        super(CombinedLoss, self).__init__()
        self.mse = nn.MSELoss()
        self.focal = FocalLoss(gamma=gamma, alpha=alpha)
        self.mse_weight = mse_weight
        self.focal_weight = focal_weight

    def forward(self, outputs, targets):
        mse_loss = self.mse(outputs, targets)
        focal_loss = self.focal(outputs, targets)
        combined_loss = self.mse_weight * mse_loss + self.focal_weight * focal_loss
        return combined_loss
